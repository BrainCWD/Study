============================================
vis/result.rtx
17:39:04_Thursday_24_May_2018
============================================
Feedback:
	Your program ("Nimsys.java") has been submitted successfully.
	Compiling your program with "javac"...
	Your program has been result.rtxd successfully :-)
Now, it's your responsibility to test your program for correctness!
Here is a simple test case, and the results:
	Your program has been result.rtxd successfully :-)
Now, it's your responsibility to test your program for correctness!
Here is a simple test case, and the results:
============================================
Test for input file: in1
Expected results:							Your results:
Welcome to Nim								Welcome to Nim

$Are you sure you want to remove all players? (y/n)			$Are you sure you want to remove all players? (y/n)

$									$
$									$
$									$
$									$
$									$
Initial stone count: 1							Initial stone count: 1
Maximum stone removal: 1						Maximum stone removal: 1
Player 1: George Washington						Player 1: George Washington
Player 2: John Adams							Player 2: John Adams

1 stones left: *							1 stones left: *
George's turn - remove how many?					George's turn - remove how many?

Game Over								Game Over
John Adams wins!							John Adams wins!

$									$
Initial stone count: 1							Initial stone count: 1
Maximum stone removal: 1						Maximum stone removal: 1
Player 1: George Washington						Player 1: George Washington
Player 2: John Adams							Player 2: John Adams

1 stones left: *							1 stones left: *
George's turn - remove how many?					George's turn - remove how many?

Game Over								Game Over
John Adams wins!							John Adams wins!

$									$
Initial stone count: 1							Initial stone count: 1
Maximum stone removal: 1						Maximum stone removal: 1
Player 1: John Adams							Player 1: John Adams
Player 2: Thomas Jefferson						Player 2: Thomas Jefferson

1 stones left: *							1 stones left: *
John's turn - remove how many?						John's turn - remove how many?

Game Over								Game Over
Thomas Jefferson wins!							Thomas Jefferson wins!

$									$
Initial stone count: 1							Initial stone count: 1
Maximum stone removal: 1						Maximum stone removal: 1
Player 1: Thomas Jefferson						Player 1: Thomas Jefferson
Player 2: James Madison							Player 2: James Madison

1 stones left: *							1 stones left: *
Thomas's turn - remove how many?					Thomas's turn - remove how many?

Game Over								Game Over
James Madison wins!							James Madison wins!

$100% | 01 games | James Madison					$100% | 01 games | James Madison
67%  | 03 games | John Adams						67%  | 03 games | John Adams
50%  | 02 games | Thomas Jefferson					50%  | 02 games | Thomas Jefferson
0%   | 02 games | George Washington					0%   | 02 games | George Washington

$									$

Your results seem to be CORRECT :-).
============================================
Test for input file: in1
Expected results:							Your results:
Welcome to Nim								Welcome to Nim

$Are you sure you want to remove all players? (y/n)			$Are you sure you want to remove all players? (y/n)

$									$
$									$
$									$
$									$
$									$
Initial stone count: 1							Initial stone count: 1
Maximum stone removal: 1						Maximum stone removal: 1
Player 1: George Washington						Player 1: George Washington
Player 2: John Adams							Player 2: John Adams

1 stones left: *							1 stones left: *
George's turn - remove how many?					George's turn - remove how many?

Game Over								Game Over
John Adams wins!							John Adams wins!

$									$
Initial stone count: 1							Initial stone count: 1
Maximum stone removal: 1						Maximum stone removal: 1
Player 1: George Washington						Player 1: George Washington
Player 2: John Adams							Player 2: John Adams

1 stones left: *							1 stones left: *
George's turn - remove how many?					George's turn - remove how many?

Game Over								Game Over
John Adams wins!							John Adams wins!

$									$
Initial stone count: 1							Initial stone count: 1
Maximum stone removal: 1						Maximum stone removal: 1
Player 1: John Adams							Player 1: John Adams
Player 2: Thomas Jefferson						Player 2: Thomas Jefferson

1 stones left: *							1 stones left: *
John's turn - remove how many?						John's turn - remove how many?

Game Over								Game Over
Thomas Jefferson wins!							Thomas Jefferson wins!

$									$
Initial stone count: 1							Initial stone count: 1
Maximum stone removal: 1						Maximum stone removal: 1
Player 1: Thomas Jefferson						Player 1: Thomas Jefferson
Player 2: James Madison							Player 2: James Madison

1 stones left: *							1 stones left: *
Thomas's turn - remove how many?					Thomas's turn - remove how many?

Game Over								Game Over
James Madison wins!							James Madison wins!

$100% | 01 games | James Madison					$100% | 01 games | James Madison
67%  | 03 games | John Adams						67%  | 03 games | John Adams
50%  | 02 games | Thomas Jefferson					50%  | 02 games | Thomas Jefferson
0%   | 02 games | George Washington					0%   | 02 games | George Washington

$									$

Your results seem to be CORRECT :-).
============================================
Test for input file: in2
Expected results:							Your results:
Welcome to Nim								Welcome to Nim

$george,George,Washington,2 games,0 wins				$george,George,Washington,2 games,0 wins
jadams,John,Adams,3 games,2 wins					jadams,John,Adams,3 games,2 wins
jmadison,James,Madison,1 games,1 wins					jmadison,James,Madison,1 games,1 wins
tom,Thomas,Jefferson,2 games,1 wins					tom,Thomas,Jefferson,2 games,1 wins

$100% | 01 games | James Madison					$100% | 01 games | James Madison
67%  | 03 games | John Adams						67%  | 03 games | John Adams
50%  | 02 games | Thomas Jefferson					50%  | 02 games | Thomas Jefferson
0%   | 02 games | George Washington					0%   | 02 games | George Washington

$									$

Your results seem to be CORRECT :-).
============================================
Test for input file: in2
Expected results:							Your results:
Welcome to Nim								Welcome to Nim

$george,George,Washington,2 games,0 wins				$george,George,Washington,2 games,0 wins
jadams,John,Adams,3 games,2 wins					jadams,John,Adams,3 games,2 wins
jmadison,James,Madison,1 games,1 wins					jmadison,James,Madison,1 games,1 wins
tom,Thomas,Jefferson,2 games,1 wins					tom,Thomas,Jefferson,2 games,1 wins

$100% | 01 games | James Madison					$100% | 01 games | James Madison
67%  | 03 games | John Adams						67%  | 03 games | John Adams
50%  | 02 games | Thomas Jefferson					50%  | 02 games | Thomas Jefferson
0%   | 02 games | George Washington					0%   | 02 games | George Washington

$									$

Your results seem to be CORRECT :-).
============================================
Test for input file: in3
Expected results:							Your results:
Welcome to Nim								Welcome to Nim

$'createplayer' is not a valid command.					$'createplayer' is not a valid command.

$Incorrect number of arguments supplied to command.			$Incorrect number of arguments supplied to command.

$									$
$									$

Your results seem to be CORRECT :-).
============================================
src/InvalidMoveException.java
17:38:51_Thursday_24_May_2018
============================================
/**
 * The University of Melbourne
 * COMP90041 Programming and Software Development
 * Student: Wendong Chen
 * Student ID: 931018    Username: wendongc1
 * Date: May 22th,2018
 */

public class InvalidMoveException extends Exception {
/*
 * When the user tries to remove an invalid number of stones from the game,  
 * it will throw an InvalidMoveExcetion.
 */

	public InvalidMoveException() {
		super("Invalid move.");
	}
	
	public InvalidMoveException(String message) {
		super(message);
	}
}
============================================
src/Nimsys.java
17:38:55_Thursday_24_May_2018
============================================

/**
 * The University of Melbourne
 * COMP90041 Programming and Software Development
 * Student: Wendong Chen
 * Student ID: 931018    Username: wendongc1
 * Date: May 22th,2018
 *
 * This program is an implementation of the game of Nim.
 * It's a two player game which begins with a number of stones. Two players remove
 * some stones alternatively until the last stone is removed. The player who
 * removes the last stone loses.
 * In Project C, the Nim program adds more functions than Project B. In addition to 
 * playing games between people, the system can add AI players, also wen can store 
 * the statistics of the game. Futhermore, the system can handle the invalid input
 * via exceptions.
 */
import java.util.Scanner;
import java.util.StringTokenizer;
import java.io.FileInputStream;
import java.io.PrintWriter;
import java.io.FileOutputStream;
import java.io.FileNotFoundException;

public class Nimsys {
	/**
	 * This class with main method manages the process of the whole program. When
	 * user text commands on the screen, the program executes commands until an
	 * "exit" command is texted. We have Addplayer, Removeplayer, Editplayer,
	 * Resetstats, Displayplayer, Rankings Exit methods in this class, which improve
	 * functionality of Nim.
	 */
	private int playerindex = 0;
	private final int playermaxnumber = 100;
	private final int highestargu = 1;
	private final int validargu = 3;
	private final int startgameargu = 4;

	private Scanner keyboard = new Scanner(System.in);
	// The "Keyboard" object is created to get user's input.

	private NimPlayer[] player = new NimPlayer[playermaxnumber];
	// This is an array of players.

	private NimGame game;

	private StringTokenizer command;

	public static void main(String[] args) {

		String order = null;
		// This variable is to get user's command.

		Nimsys call = new Nimsys();
		// This object is to invoke/call the methods in Nimsys class.

		System.out.println("Welcome to Nim");
		// Next will read the file "players.dat".
		try {
			Scanner input = new Scanner(new FileInputStream("players.dat"));
			while (input.hasNext()) {
				if (input.nextLine().equals("true")) {
					call.player[call.playerindex] = new NimAIPlayer(input.nextLine(), 
						input.nextLine(), input.nextLine());
					call.player[call.playerindex].setGamenumber(Integer.parseInt(input.nextLine()));
					call.player[call.playerindex].setWinnumber(Integer.parseInt(input.nextLine()));
				} else {
					call.player[call.playerindex] = new NimHumanPlayer(input.nextLine(), 
						input.nextLine(), input.nextLine());
					call.player[call.playerindex].setGamenumber(Integer.parseInt(input.nextLine()));
					call.player[call.playerindex].setWinnumber(Integer.parseInt(input.nextLine()));
				}
				call.playerindex = call.playerindex + 1;
			}
			input.close();

		} catch (FileNotFoundException e) {
		}

		do {
			try {
				System.out.println();
				System.out.print("$");
				// All the input is texted after this prompt "$".

				call.command = new StringTokenizer(call.keyboard.nextLine(), ", ");
				// This is to recover the words or tokens in a multi-word String.

				order = call.command.nextToken();

				if (order.equals("addplayer") || order.equals("addaiplayer")) {
					/*
					 * When the order is "addplayer" or "addaiplayer", excute the addplayer command,
					 * i.e., call the Addplayer method.
					 */
					try {
						if (call.command.countTokens() != call.validargu) {
							throw new InvalidNumberofArgumentsException();
						}
						call.Addplayer(order, call.command.nextToken(", "), call.command.nextToken(", "),
								call.command.nextToken(", "), call.player);
					} catch (InvalidNumberofArgumentsException e) {
						System.out.println(e.getMessage());
					}

				} else if (order.equals("removeplayer")) {
					/*
					 * When the order is "removeplayer", excute the removeplayer command, i.e., call
					 * the Removeplayer method.
					 */
					try {
						if (call.command.countTokens() > call.highestargu) {
							throw new InvalidNumberofArgumentsException();
						}
						call.Removeplayer(call.command, call.player, call.keyboard);
					} catch (InvalidNumberofArgumentsException e) {
						System.out.println(e.getMessage());
					}

				} else if (order.equals("editplayer")) {
					/*
					 * When the order is "editplayer", excute the editplayer command, i.e., call the
					 * Editplayer method.
					 */
					try {
						if (call.command.countTokens() != call.validargu) {
							throw new InvalidNumberofArgumentsException();
						}
						call.Editplayer(call.command.nextToken(", "), call.command.nextToken(", "),
								call.command.nextToken(", "), call.player);
					} catch (InvalidNumberofArgumentsException e) {
						System.out.println(e.getMessage());
					}

				} else if (order.equals("displayplayer")) {
					/*
					 * When the order is "displayplayer", excute the displayplayer command, i.e.,
					 * call the Displayplayer method.
					 */
					try {
						if (call.command.countTokens() > call.highestargu) {
							throw new InvalidNumberofArgumentsException();
						}
						call.Displayplayer(call.command, call.player);
					} catch (InvalidNumberofArgumentsException e) {
						System.out.println(e.getMessage());
					}

				} else if (order.equals("startgame")) {
					/*
					 * When the order is "startgame", excute the startgame command, i.e., call the
					 * Startgame method.
					 */
					try {
						if (call.command.countTokens() != call.startgameargu) {
							throw new InvalidNumberofArgumentsException();
						}
						call.Startgame(call.command, call.player, call.keyboard);
					} catch (InvalidNumberofArgumentsException e) {
						System.out.println(e.getMessage());
					}

				} else if (order.equals("resetstats")) {
					/*
					 * When the order is "resetstats", excute the resetstats command, i.e., call the
					 * Resetstats method.
					 */
					try {
						if (call.command.countTokens() > call.highestargu) {
							throw new InvalidNumberofArgumentsException();
						}
						call.Resetstats(call.command, call.player, call.keyboard);
					} catch (InvalidNumberofArgumentsException e) {
						System.out.println(e.getMessage());
					}

				} else if (order.equals("rankings")) {
					/*
					 * When the order is "rankings", excute the rankings command, i.e., call the
					 * Rankings method.
					 */
					try {
						if (call.command.countTokens() > call.highestargu) {
							throw new InvalidNumberofArgumentsException();
						}
						call.Rankings(call.command, call.player);
					} catch (InvalidNumberofArgumentsException e) {
						System.out.println(e.getMessage());
					}

					// While the order is not valid, it will throw an exception.
				} else if (!order.equals("exit")) {
					throw new InvalidCommandException(order);
				}
			} catch (InvalidCommandException c) {
				System.out.println("'" + c.getMessage() + "' is not a valid command.");
			}

		} while (!order.equals("exit"));
		System.out.println();
		/*
		 * When the order is "exit", exit the while loop and excute the exit command,
		 * i.e., call the Exit method.
		 */
		call.Exit();
	}

	private void Addplayer(String Order, String Username, String Familyname, 
							String Givenname, NimPlayer[] Player) {
		// This method is to perform addplayer operation.

		if (playerindex != 0) {
			for (int i = 0; i < playerindex; i++) {
				if (Username.equals(Player[i].getName())) {
					System.out.println("The player already exists.");
					break;
				}

				if (i == playerindex - 1) {
					if (Order.equals("addplayer")) {
						Player[playerindex] = new NimHumanPlayer(Username, Familyname, Givenname);
						playerindex = playerindex + 1;
						break;
					}
					if (Order.equals("addaiplayer")) {
						Player[playerindex] = new NimAIPlayer(Username, Familyname, Givenname);
						playerindex = playerindex + 1;
						break;
					}
				}
			}
		} else {
			if (Order.equals("addplayer")) {
				Player[playerindex] = new NimHumanPlayer(Username, Familyname, Givenname);
				playerindex = playerindex + 1;
			} else {
				Player[playerindex] = new NimAIPlayer(Username, Familyname, Givenname);
				playerindex = playerindex + 1;
			}

		}
	}

	private void Removeplayer(StringTokenizer Command, NimPlayer[] Player, 
								Scanner Keyboard) {
		// This method is to perform removeplayer operation.

		if (Command.hasMoreElements()) {
			String userName = Command.nextToken();
			NimPlayer[] Temporary = new NimPlayer[100];

			int a = 0;
			if (playerindex != 0) {
				for (int i = 0; i < playerindex; i++) {
					if (!userName.equals(Player[i].getName())) {
						Temporary[a] = Player[i];
						a = a + 1;
					}

					if (a == playerindex) {
						System.out.println("The player does not exist.");
					}
				}

				for (int i = 0; i < a; i++) {
					Player[i] = Temporary[i];
				}
				playerindex = a;
			} else {
				System.out.println("The player does not exist.");
			}
		} else {
			System.out.println("Are you sure you want to remove all players? (y/n)");
			if ("y".equals(Keyboard.nextLine())) {
				playerindex = 0;
			}
		}
	}

	private void Editplayer(String userName, String Familyname, 
							String Givenname, NimPlayer[] Player) {
		// This method is to perform editplayer operation.

		if (playerindex != 0) {
			for (int i = 0; i < playerindex; i++) {
				if (userName.equals(Player[i].getName())) {
					Player[i].setFamilyname(Familyname);
					Player[i].setGivenname(Givenname);
					break;
				}

				if (i == playerindex - 1) {
					System.out.println("The player does not exist.");
				}
			}
		} else {
			System.out.println("The player does not exist.");
		}
	}

	private void Displayplayer(StringTokenizer Command, NimPlayer[] Player) {
		// This method is to perform display operation.

		if (Command.hasMoreElements()) {
			String userName = Command.nextToken();
			if (playerindex != 0) {
				for (int i = 0; i < playerindex; i++) {
					if (userName.equals(Player[i].getName())) {
						System.out.println(Player[i].getName() + "," + Player[i].getGivenname() + ","
								+ Player[i].getFamilyname() + "," + Player[i].getGamenumber() + " games,"
								+ Player[i].getWinnumber() + " wins");
						break;
					}

					if (i == playerindex - 1) {
						System.out.println("The player does not exist.");
					}
				}
			} else {
				System.out.println("The player does not exist.");
			}
		} else {
			if (playerindex != 0) {
				if (playerindex != 1) {
					rankings(Player);
				}
				for (int i = 0; i < playerindex; i++) {
					System.out.println(
							Player[i].getName() + "," + Player[i].getGivenname() + "," 
							+ Player[i].getFamilyname() + "," + Player[i].getGamenumber() 
							+ " games," + Player[i].getWinnumber() + " wins");
				}
			}

		}

	}

	private void Resetstats(StringTokenizer Command, NimPlayer[] Player, Scanner Keyboard) {
		// This method is to perform resetstats operation.

		if (Command.hasMoreElements()) {
			String userName = Command.nextToken();
			if (playerindex != 0) {
				for (int i = 0; i < playerindex; i++) {
					if (userName.equals(Player[i].getName())) {
						Player[i].setGamenumber(0);
						Player[i].setWinnumber(0);
						break;
					}

					if (i == playerindex - 1) {
						System.out.println("The player does not exist.");
					}
				}
			} else {
				System.out.println("The player does not exist.");
			}
		} else {
			System.out.println("Are you sure you want to reset all player statistics? (y/n)");
			if ("y".equals(Keyboard.nextLine())) {
				for (int i = 0; i < playerindex; i++) {
					Player[i].setGamenumber(0);
					Player[i].setWinnumber(0);
				}
			}
		}
	}

	private void Rankings(StringTokenizer Command, NimPlayer[] Player) {
		// This method is to perform ranking operation.

		if (playerindex != 0) {
			for (int i = 0; i < playerindex; i++) {
				Player[i].setPercentage();
			}
			NimPlayer[] Temp = new NimPlayer[100];
			/*
			 * This array is the same as the player array, but it will be ranked in
			 * ascending order.
			 */

			if (playerindex > 1) {
				/*
				 * First, rank the player array in alpabetical order and then rank the winning
				 * rate in descending order for player array and in ascending order for the Temp
				 * array..
				 */
				rankings(Player);
				// Rank the player array in alpabetical order.

				for (int i = 0; i < playerindex; i++) {
					Temp[i] = Player[i];
				}

				for (int i = 0; i <= playerindex - 2; i++) {
					int max = i;
					for (int j = i + 1; j <= playerindex - 1; j++) {
						if (Player[max].getPercentage() < Player[j].getPercentage()) {
							max = j;
						}
					}
					NimPlayer temp = Player[max];
					Player[max] = Player[i];
					Player[i] = temp;
				}

				for (int i = 0; i <= playerindex - 2; i++) {
					int min = i;
					for (int j = i + 1; j <= playerindex - 1; j++) {
						if (Temp[min].getPercentage() > Temp[j].getPercentage()) {
							min = j;
						}
					}
					NimPlayer temp = Temp[min];
					Temp[min] = Temp[i];
					Temp[i] = temp;
				}
			} else {
				Temp[0] = Player[0];
			}

			if (Command.hasMoreElements()) {
				String nextorder = Command.nextToken();
				if (nextorder.equals("asc")) {
					for (int i = 0; i < playerindex && i < 10; i++) {
						System.out.printf("%-4s %s %02d %s %s %s", Temp[i].getPercentageformat(), 
							"|", Temp[i].getGamenumber(), "games |", Temp[i].getGivenname(), 
							Temp[i].getFamilyname());
						System.out.println();

					}
				} else if (nextorder.equals("desc")) {
					for (int i = 0; i < playerindex && i < 10; i++) {
						System.out.printf("%-4s %s %02d %s %s %s", Player[i].getPercentageformat(), 
							"|", Player[i].getGamenumber(), "games |", Player[i].getGivenname(),
							Player[i].getFamilyname());
						System.out.println();
					}
				}
			} else {
				for (int i = 0; i < playerindex && i < 10; i++) {
					System.out.printf("%-4s %s %02d %s %s %s", Player[i].getPercentageformat(), 
						"|", Player[i].getGamenumber(), "games |", Player[i].getGivenname(), 
						Player[i].getFamilyname());
					System.out.println();
				}
			}
		}
	}

	private NimPlayer[] rankings(NimPlayer[] Player) {
		// This method is to perform ranking operation by alphabetic order.

		for (int i = 0; i <= playerindex - 2; i++) {
			int min = i;
			for (int j = i + 1; j <= playerindex - 1; j++) {
				if (Player[min].getName().compareTo(Player[j].getName()) > 0) {
					min = j;
				}
			}
			NimPlayer temp = Player[min];
			Player[min] = Player[i];
			Player[i] = temp;
		}
		return Player;
	}

	private void Startgame(StringTokenizer Command, NimPlayer[] Player, Scanner Keyboard) {
		// This method is to perform startgame operation.
		game = new NimGame(Integer.parseInt(Command.nextToken(", ")), 
							Integer.parseInt(Command.nextToken(", ")),
							Command.nextToken(", "), Command.nextToken(", "));
		game.Gameprocess(Player, Keyboard, playerindex);
	}

	private void Exit() {
		/*
		 * This method is to perform exit operation, i.e., end the program. Before the
		 * ending, the statistics will write to the file "players.dat".
		 */
		try {
			PrintWriter output = new PrintWriter(new FileOutputStream("players.dat"));
			if (playerindex > 0) {
				for (int i = 0; i < playerindex; i++) {
					output.println(player[i].getIsAI() + "\n" + player[i].getName() + 
						"\n" + player[i].getFamilyname() + "\n" + player[i].getGivenname() + 
						"\n" + player[i].getGamenumber() + "\n" + player[i].getWinnumber());
				}
			}
			output.close();
		} catch (FileNotFoundException e) {
			System.out.println("Problem opening files.");
		}
		System.exit(0);
	}
}============================================
src/NimHumanPlayer.java
17:38:53_Thursday_24_May_2018
============================================

/**
 * The University of Melbourne
 * COMP90041 Programming and Software Development
 * Student: Wendong Chen
 * Student ID: 931018    Username: wendongc1
 * Date: May 22th,2018
 */

import java.util.Scanner;

public class NimHumanPlayer extends NimPlayer {
	/*
	 * NimHumanPlayer class inherits all the attributes of the base class
	 * (NimPlayer), and overrides the removeStone method and getIsAI method.
	 */
	private boolean IsAI;

	public NimHumanPlayer(String Username, String Familyname, String Givenname) {
		super(Username, Familyname, Givenname);
		this.IsAI = false;
	}

	public int removeStone(String Playergivenname, int Stonenumber, 
							int Upperbound, Scanner Keyboard) {
		// This method is to perform remove operation for human players.

		int NumberofRemove;
		// This variable is the number of stones player removes once.
		String junk = null;

		System.out.println(Playergivenname + "'s turn - remove how many?");
		

		try {
			NumberofRemove = Keyboard.nextInt();
			junk = Keyboard.nextLine();
			System.out.println();
			if (NumberofRemove > Upperbound || NumberofRemove > Stonenumber || NumberofRemove <= 0) {
				throw new InvalidMoveException();
			}
		} catch (InvalidMoveException e) {
			if (Stonenumber >= Upperbound) {
				System.out.println(e.getMessage() + " You must remove between 1 and " + 
					Upperbound + " stones.");
				System.out.println();
			} else {
				System.out.println(e.getMessage() + " You must remove between 1 and " + 
					Stonenumber + " stones.");
				System.out.println();
			}
			return 0;
		} catch (Exception e) {
			junk = Keyboard.nextLine();
			System.out.println("\nInvalid Move. You must remove between 1 and " + Upperbound + " stones.");
			System.out.println();
			return 0;
		}
		return NumberofRemove;
	}

	public boolean getIsAI() {
		return this.IsAI;
	}

}
============================================
src/NimAIPlayer.java
17:38:52_Thursday_24_May_2018
============================================

/**
 * The University of Melbourne
 * COMP90041 Programming and Software Development
 * Student: Wendong Chen
 * Student ID: 931018    Username: wendongc1
 * Date: May 22th,2018
 */

import java.util.Scanner;

public class NimAIPlayer extends NimPlayer implements Testable{
	/*
	 * NimAIPlayer class inherits all the attributes of the base class (NimPlayer),
	 * and overrides the removeStone method and getIsAI method. Also, in the
	 * removeStone method defines a victory guaranteed strategy.
	 */

	private boolean IsAI;

	public NimAIPlayer(String Username, String Familyname, String Givenname) {
		super(Username, Familyname, Givenname);
		this.IsAI = true;
	}

	public int removeStone(String Playergivenname, int Stonenumber, 
							int Upperbound, Scanner Keyboard) {
		int NumberofRemove;

		System.out.println(Playergivenname + "'s turn - remove how many?");

		if (Stonenumber % (Upperbound + 1) == 0) {
			NumberofRemove = Upperbound;
		} else if (Stonenumber % (Upperbound + 1) != 1 ) {
			NumberofRemove = Stonenumber % (Upperbound + 1) - 1;
		} else if (Stonenumber >= Upperbound) {
			NumberofRemove = (int) (Math.random() * (Upperbound - 1)) + 1;
		} else {
			NumberofRemove = 1;
		}
		System.out.println();

		return NumberofRemove;
	}

	public boolean getIsAI() {
		return this.IsAI;
	}

	public String advancedMove(boolean[] available, String lastMove) {
		String move = "";
		return move;
	}
}
============================================
src/NimGame.java
17:38:53_Thursday_24_May_2018
============================================

/**
 * The University of Melbourne
 * COMP90041 Programming and Software Development
 * Student: Wendong Chen
 * Student ID: 931018    Username: wendongc1
 * Date: May 22th,2018
 */

import java.util.Scanner;

public class NimGame {
	private int stonenumber, upperbound;
	/*
	 * These variables are the stone number and upperbound of the stone players can
	 * remove once, repectively.
	 */
	private String player1, player2;
	// These variables are two players' name, respectively.

	private int player1index, player2index;
	// These variables are the index of two players in the player array.

	public NimGame(int Initialnumber, int Upperbound, String Player1, String Player2) {
		/*
		 * The constructor of the Nim game defines the initial number of stones, the
		 * upperbound of the stones which players can remove once and two players.
		 */
		this.stonenumber = Initialnumber;
		this.upperbound = Upperbound;
		this.player1 = Player1;
		this.player2 = Player2;
	}

	public void Gameprocess(NimPlayer[] Player, Scanner Keyboard, int Index) {
		/*
		 * This method contains all the process of the Nim game. First determine if two
		 * players exist and then process the game.
		 */
		player1index = exist(player1, Index, Player);
		player2index = exist(player2, Index, Player);

		if (-1 != player1index && -1 != player2index) {
			Player[player1index].setGamenumber(1);
			Player[player2index].setGamenumber(1);
			System.out.println();
			System.out.println("Initial stone count: " + stonenumber);
			System.out.println("Maximum stone removal: " + upperbound);
			System.out.println(
					"Player 1: " + Player[player1index].getGivenname() + 
					" " + Player[player1index].getFamilyname());
			System.out.println(
					"Player 2: " + Player[player2index].getGivenname() + 
					" " + Player[player2index].getFamilyname());
			System.out.println();

			printStones(stonenumber);
			while (stonenumber > 0) {
				int validRemoval = stonenumber;
				while (validRemoval == stonenumber) {
					IsGameOver(Player[player1index].removeStone(Player[player1index].getGivenname(), 
						stonenumber, upperbound, Keyboard), Player[player2index]);
				}

				if (stonenumber > 0) {
					validRemoval = stonenumber;
					while (validRemoval == stonenumber) {
						IsGameOver(Player[player2index].removeStone(Player[player2index].getGivenname(), 
							stonenumber, upperbound, Keyboard), Player[player1index]);
					}
				}

			}

		}
	}

	private int exist(String Playername, int index, NimPlayer[] Player) {
		// This method is to determine if the players exist.
		if (index != 0) {
			for (int i = 0; i < index; i++) {
				if (Playername.equals(Player[i].getName())) {
					return i;
				}
				if (i == index - 1) {
					System.out.println("One of the players does not exist.");
				}
			}

		} else {
			System.out.println("One of the players does not exist.");
		}

		return -1;
	}

	private void IsGameOver(int numberofremove, NimPlayer Player) {
		/*
		 * This method is to calculate the remaining stones and print them on the screen
		 * by asterisks. If the last stone is removed, it will announce the winner.
		 */

		stonenumber = stonenumber - numberofremove;

		if (stonenumber == 0) {
			System.out.println("Game Over");
			System.out.println(Player.getGivenname() + " " + Player.getFamilyname() + " wins!");
			Player.setWinnumber(1);
		} else {
			printStones(stonenumber);
		}
	}

	private void printStones(int stoneNumber) {
		// This method is to print stones using asterisk "*".

		System.out.print(stoneNumber + " stones left:");
		for (int i = 0; i < stoneNumber; i++) {
			System.out.print(" *");
		}
		System.out.println();
	}
}
============================================
src/InvalidCommandException.java
17:38:50_Thursday_24_May_2018
============================================
/**
 * The University of Melbourne
 * COMP90041 Programming and Software Development
 * Student: Wendong Chen
 * Student ID: 931018    Username: wendongc1
 * Date: May 22th,2018
 */

public class InvalidCommandException extends Exception {
/*
 * When the user enters an invalid command, it will throw an 
 * InvalidCommandExcetion.
 */
	
	public InvalidCommandException() {
		super("Invalid command");
	}
	
	public InvalidCommandException(String message) {
		super(message);
	}
}
============================================
src/NimPlayer.java
17:38:54_Thursday_24_May_2018
============================================

/**
 * The University of Melbourne
 * COMP90041 Programming and Software Development
 * Student: Wendong Chen
 * Student ID: 931018    Username: wendongc1
 * Date: May 22th,2018
 */

import java.util.Scanner;

public abstract class NimPlayer {
	/**
	 * In this abstract class difines all the attributes of each player and also has
	 * lots of accssors and mutators due to the private type. The abstract methods
	 * will be overrided in the derived classes, i.e., NimHumanPlayer and
	 * NimAIPlayer.
	 */
	private String username, family_name, given_name;
	/*
	 * These variables are the username, familyname and givenname of the players,
	 * respectively.
	 */

	private int gamenumber = 0, winnumber = 0;
	/*
	 * These variables are the game number and win number statistics that players
	 * played, respectively.
	 */

	private double percentage;
	// This variable is the players' winning rate.

	private String percentageFormat;
	// This variable is the players' winning rate writting in '%' format.

	public NimPlayer(String Username, String Familyname, String Givenname) {
		/*
		 * The constuctor of every player, in which defines players' username,
		 * familyname and givenname.
		 */
		this.username = Username;
		this.family_name = Familyname;
		this.given_name = Givenname;
	}

	public String getName() {
		// The accessor of players' username.
		return this.username;
	}

	public String getFamilyname() {
		// The accessor of players' familyname.
		return this.family_name;
	}

	public void setFamilyname(String Familyname) {
		// The mutator of players' familyname.
		this.family_name = Familyname;
	}

	public String getGivenname() {
		// The accessor of players' givenname.
		return this.given_name;
	}

	public void setGivenname(String Givenname) {
		// The mutator of players' givenname.
		this.given_name = Givenname;
	}

	public int getGamenumber() {
		// The accessor of players' gamenumber.
		return this.gamenumber;
	}

	public void setGamenumber(int Number) {
		// The mutator of players' gamenumber.
		if (Number != 0) {
			this.gamenumber = gamenumber + Number;
		} else {
			this.gamenumber = 0;
		}
	}

	public int getWinnumber() {
		// The accessor of players' winnumber.
		return this.winnumber;
	}

	public void setWinnumber(int Number) {
		// The mutator of players' winnumber.
		if (Number != 0) {
			this.winnumber = winnumber + Number;
		} else {
			this.winnumber = 0;
		}
	}

	public double getPercentage() {
		// The accessor of players' winning rate.
		return this.percentage;
	}

	public void setPercentage() {
		// The mutator of players' winning rate.
		if (this.winnumber == 0) {
			this.percentage = 0;
		} else {
			this.percentage = (double) this.winnumber * 100 / (double) this.gamenumber;
		}
	}

	public String getPercentageformat() {
		// Format the players' winning rate.
		return this.percentageFormat = Math.round(this.percentage) + "%";
	}

	public abstract int removeStone(String Playergivenname, int Stonenumber, 
										int Upperbound, Scanner Keyboard);

	public abstract boolean getIsAI();
}============================================
src/InvalidNumberofArgumentsException.java
17:38:51_Thursday_24_May_2018
============================================
/**
 * The University of Melbourne
 * COMP90041 Programming and Software Development
 * Student: Wendong Chen
 * Student ID: 931018    Username: wendongc1
 * Date: May 22th,2018
 */

public class InvalidNumberofArgumentsException extends Exception {
/*
 * When the user enters a valid command but does not provide the correct number
 * of arguments, it will throw an InvalidNumberofSrgumentsExcetion.
 */

	public InvalidNumberofArgumentsException() {
		super("Incorrect number of arguments supplied to command.");
	}
	
	public InvalidNumberofArgumentsException(String message) {
		super(message);
	}
}
============================================
src/Testable.java
17:38:56_Thursday_24_May_2018
============================================
/**
 * The University of Melbourne
 * COMP90041 Programming and Software Development
 * Student: Wendong Chen
 * Student ID: 931018    Username: wendongc1
 * Date: May 22th,2018
 */

public interface Testable {
	public String advancedMove(boolean[] available, String lastMove);
}